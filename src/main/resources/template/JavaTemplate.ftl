package ${package_name};

<#list imports as item>
import ${item};
</#list>

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.mockpolicies.Slf4jMockPolicy;
import org.powermock.api.support.membermodification.MemberModifier;
import org.powermock.core.classloader.annotations.MockPolicy;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;

/**
* generated by MockTest;
* @Author MockGen
* @Date ${.now}
*/

@RunWith(PowerMockRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
@PrepareForTest({
    ${class_name}.class,
<#list prepare_for_tests as item>
    ${item}.class,
</#list>
})
@SuppressStaticInitializationFor({
<#list suppresses as item>
    "${item}",
</#list>
})
public class ${test_class_name} {

    private ${class_name} testObj;

<#list mocks as item>
    @Mock
    private ${item.classname} ${item.name};
</#list>

<#if useSlf4j == false>
    @Mock
    private Logger logger;
</#if>

    @Before
    public void setUp() {
    <#list mock_statics as item>
        PowerMockito.mockStatic(${item}.class);
    </#list>

    <#if useSlf4j == false>
        PowerMockito.mockStatic(LoggerFactory.class);
        PowerMockito.when(LoggerFactory.getLogger(Mockito.eq(${class_name}.class)).thenReturn(logger);
    </#if>

        testObj = new ${class_name}(<#list constructor_params as item>${item}<#if item_has_next>,</#if></#list>);

    <#list fields_not_in_constructor as item>
        MemberModifier.field(${class_name}.class, "${item.name}").set(testObj, ${item.name});
    </#list>
    }
}

